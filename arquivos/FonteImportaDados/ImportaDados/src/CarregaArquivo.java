
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import importa.dao.ConexaoPostgres;
import importa.model.Aluno;
import importa.model.Escola;
import importa.model.Etapa;
import importa.model.Turma;
import importa.model.Usuario;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author renato
 */
public class CarregaArquivo extends javax.swing.JFrame {

    Usuario user;
    /**
     * Creates new form CarregaArquivo
     */
    public CarregaArquivo(Usuario user) {
        initComponents();
        this.user=user;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Passo a Passo"));
        jPanel2.setName("Passo a Passo"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("1-Clique no botâo Importar Planilha;\n2-Na tela que abriu, navegue nas pastas até o local onde está o arquivo,\nExcel, desejado;\n3-Selecione o arquivo e aguarde o processamento;");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("O que será executado:"));
        jPanel3.setName("Passo a Passo"); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("1-Cadastro da Escola->caso nâo exista no banco de dados;\n2-Cadastro das Etapas de Ensino->caso nâo exista no banco de dados;\n3-Cadastro de Turmas->caso nâo exista no banco de dados;\n4-Cadastro dos Alunos->caso nâo exista no banco de dados;\n5-Registro de Enturmacao->caso nâo exista no banco de dados;");
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jButton1.setText("Importar Planilha");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel1.setText("Mostra os dados processando");

        jLabel6.setText("conexão");

        jLabel5.setText("Versão 5.0.1 2020");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2018", "2019" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Ano da Enturmação:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(85, 85, 85))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(182, 182, 182)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(63, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        jPanel2.getAccessibleContext().setAccessibleDescription("Passo a Passo");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Processando processando = new Processando();
        Integer ano=Integer.parseInt(jComboBox1.getSelectedItem().toString());
        this.buscar(ano);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

 public void buscar(Integer ano) {
          
         // Implementa os tipos de arquivos que apareceram para escolha
         FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter(
         //descricao , extens�es permitidas
         "Planhilhas", "ods", "xls", "xlsx");
         //Inst�nciando o selecionador de arquivos
         JFileChooser fc = new JFileChooser();
         //Adicionando os arquivos que poderam ser selecionados
         fc.setFileFilter(fileNameExtensionFilter);
         //Nome da tela localizadora de arquvios
         fc.setDialogTitle("Escolhendo arquivo");
         //processando.setVisible(true);
       //Recebe uma resposta da janela quaso algum evento do localizador de arquivo seja acessado
          /**/
         
          int resposta = fc.showOpenDialog(null);
         
       //Verifica se resposta recebida � igual a ok
       if (resposta == JFileChooser.APPROVE_OPTION) {    	   
    	                    
                       
                    //Se sim abre um buffer do arquivo e joga na tela
                    
                    
            new Thread(){
                    public void run(){                        
                        try {
                            File file = new File(fc.getSelectedFile().getAbsolutePath());
                            FileInputStream fis= new FileInputStream(file);                            
                            XSSFWorkbook workbook = new XSSFWorkbook(fis);
                            XSSFSheet planilha = workbook.getSheetAt(0);
                                jProgressBar1.setValue(0); 
                                jLabel1.setText("Iniciando processamento do Arquivo");
                                
                                Iterator<Row> rowIterator = planilha.iterator();         			
         			
         			String estado="";
         			Escola escola = new Escola();
         				   escola.setFl_ativo(true);
                                String cidade = "";                                            
         			Aluno aluno = null;
         			Turma turma = null;
         			Etapa etapa = null;
         			String celulaAnterior="";	   
         			int i=0;
         			//varre todas as linhas da planilha
         			while(rowIterator.hasNext()) {
                                    //jProgressBar1.setValue(i++);
         				Row row = rowIterator.next();
         				Iterator<Cell> cellIterator = row.iterator();
         				while(cellIterator.hasNext()) {
                                                    sleep(300);
                                                    
         					Cell celula = cellIterator.next();
         					switch (celula.getCellType()) {
         					case STRING: 
         						jLabel1.setText(celula.getStringCellValue().toString());
                                                        
                                                        if(!celula.getStringCellValue().toString().trim().equals(new String("Total de matriculas de escolarização:"))){
                                                            if(jProgressBar1.getValue()>97){
                                                                i=i-1;
                                                                jProgressBar1.setValue(i);
                                                            }
                                                        }else{
                                                                jProgressBar1.setValue(100);
                                                        }
                                                        
         						if(celula.getStringCellValue().toString().equals(new String("Informações da Turma"))) {
		         					celulaAnterior="Informações da Turma";
		         				}
         						if(celula.getStringCellValue().toString().equals(new String("Total de alunos da escola:"))) {
		         					celulaAnterior="Informações da Turma";
		         				}
                                                        
	         					if(celula.getStringCellValue().toString().equals(new String("Código da escola")) ){
	         						celula = cellIterator.next();
	         						escola.setNr_inep(celula.getStringCellValue());	
	         					}	         					
		         				if(celula.getStringCellValue().toString().equals(new String("Nome da escola:")) ){
		         						celula = cellIterator.next();
		         						celula = cellIterator.next();
		         						escola.setNm_escola(celula.getStringCellValue());
		         				}
		         				if(celula.getStringCellValue().toString().equals(new String("UF:"))) {
		         					celula = cellIterator.next();
	         						celula = cellIterator.next();
		         					estado =celula.getStringCellValue();
		         				}	
		         				
		         				if(celula.getStringCellValue().toString().equals(new String("Município:"))) {
		         						celula = cellIterator.next();
		         						celula = cellIterator.next();
		         						//insere escola		         						
		         						cidade =celula.getStringCellValue();                                                                                       
		         						ConexaoPostgres conectaBanco = new ConexaoPostgres();
		         										conectaBanco.adicionaEscola(escola,estado, cidade,user);
                                                                                                        if(conectaBanco.url.equals(new String("jdbc:postgresql://localhost:5432/postgres")) ||
                                                                                                                conectaBanco.url.equals(new String("jdbc:postgresql://localhost:5432/saevprod"))
                                                                                                                ){
                                                                                                            jLabel6.setText( new String("Desenvolvimento"));
                                                                                                        }else if(conectaBanco.url.equals(new String("jdbc:postgresql://saevtreina.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("TREINAMENTO"));
                                                                                                        }else if(conectaBanco.url.equals(new String("jdbc:postgresql://saevprod.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("PRODUÇÃO"));
                                                                                                        }                                                                                                         
		         										conectaBanco=null;                                                                                                        
                                                                        jLabel1.setText(escola.getNm_escola());
                                                                        
                                                                        jProgressBar1.setValue(i++);                                   
		         						
		         				}
                                                        if(celula.getStringCellValue().toString().equals(new String("Nome da turma:"))) {
		         					celula = cellIterator.next();
	         						celula = cellIterator.next();
	         						turma = new Turma();
	         							turma.setNm_turma(celula.getStringCellValue());	         							
		         					
		         				}
         						
         						if(celula.getStringCellValue().toString().equals(new String("Modalidade: "))) {
		         					celula = cellIterator.next();
	         						celula = cellIterator.next();
	         						if(celula.getStringCellValue().equals(new String("Ensino Regular"))) {
	         							turma.setTp_turma("R");
	         							turma.setNr_ano_letivo(ano);
	         						}
		         				}
                                                        
		         				if(celula.getStringCellValue().toString().equals(new String("Etapa:"))) {
		         					celula = cellIterator.next();		         					
	         						celula = cellIterator.next();		         						
	         						  if(celula.getStringCellValue()!="" && !celula.getStringCellValue().equals("Todas") ){
	         							etapa = new Etapa();
	         							etapa.setNm_etapa(celula.getStringCellValue());
	         							ConexaoPostgres conectaBanco = new ConexaoPostgres();
 										conectaBanco.adicionaEtapa(etapa,user);
                                                                                jLabel1.setText("Etapa Adicionada:"+etapa.getNm_etapa());       
 										conectaBanco.adicionaTurma(turma,etapa,escola,user,ano); 									
                                                                                                        if(conectaBanco.url.equals(new String("jdbc:postgresql://localhost:5432/postgres"))
                                                                                                           ||conectaBanco.url.equals(new String("jdbc:postgresql://localhost:5432/saevprod"))     ){
                                                                                                            jLabel6.setText( new String("Desenvolvimento"));
                                                                                                        }else if(conectaBanco.url.equals(new String("jdbc:postgresql://saevtreina.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("TREINAMENTO"));
                                                                                                        }else if(conectaBanco.url.equals(new String("jdbc:postgresql://saevprod.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("PRODUÇÃO"));
                                                                                                        } 
 										conectaBanco=null;
                                                                                jLabel1.setText("Turma Adicionada:"+turma.getNm_turma());       
                                                                        //jProgressBar1.setValue(i++);           
	         						  }	
		         				}
                                                        
                                    if(celulaAnterior.equals("Forma de ingresso do aluno") || 
                                    		celulaAnterior.equals("Tipo de veículo utilizado no transporte escolar")
                                       ) {
				         					aluno = new Aluno();
				         					aluno.setNr_inep(celula.getStringCellValue());
				         					celula = cellIterator.next();
				         					aluno.setNm_aluno(celula.getStringCellValue());
				         					celula = cellIterator.next();
				         					String dataString = celula.getStringCellValue();
				         					DateFormat fmt = new SimpleDateFormat("dd/MM/yyyy");
				         					java.sql.Date data = null;
									try {
										data = new java.sql.Date(fmt.parse(dataString).getTime());
									} catch (ParseException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
		         					
		         					aluno.setDt_nascimento(data);
		         					celula = cellIterator.next();
		         					celula = cellIterator.next();
		         					celula = cellIterator.next();
		         					celula = cellIterator.next();
		         					celula = cellIterator.next();
		         					celula = cellIterator.next();
		         					ConexaoPostgres conectaBancoAluno = new ConexaoPostgres();
		         						conectaBancoAluno.adicionaAluno(aluno,escola,estado, cidade,user);
                                                                                                        if(conectaBancoAluno.url.equals(new String("jdbc:postgresql://localhost:5432/postgres"))
                                                                                                            ||conectaBancoAluno.url.equals(new String("jdbc:postgresql://localhost:5432/saevprod"))    ){
                                                                                                            jLabel6.setText( new String("Desenvolvimento"));
                                                                                                        }else if(conectaBancoAluno.url.equals(new String("jdbc:postgresql://saevtreina.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("TREINAMENTO"));
                                                                                                        }else if(conectaBancoAluno.url.equals(new String("jdbc:postgresql://saevprod.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("PRODUÇÃO"));
                                                                                                        } 
                                                                        jLabel1.setText("Aluno Adicionado:"+aluno.getNm_aluno());
			         					conectaBancoAluno.adicionaEnturmacao(escola,turma, aluno,user,ano);
                                                                                                        if(conectaBancoAluno.url.equals(new String("jdbc:postgresql://localhost:5432/postgres"))
                                                                                                            ||conectaBancoAluno.url.equals(new String("jdbc:postgresql://localhost:5432/saevprod"))    ){
                                                                                                            jLabel6.setText( new String("Desenvolvimento"));
                                                                                                        }else if(conectaBancoAluno.url.equals(new String("jdbc:postgresql://saevtreina.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("TREINAMENTO"));
                                                                                                        }else if(conectaBancoAluno.url.equals(new String("jdbc:postgresql://saevprod.postgresql.dbaas.com.br"))){
                                                                                                            jLabel6.setText( new String("PRODUÇÃO"));
                                                                                                        } 
                                                                        jLabel1.setText("Enturmação Adicionada!");
			         					conectaBancoAluno=null;
                                                                        
                                                                        jProgressBar1.setValue(i++);
		         				}
		         				
		         				
		         				if(celula.getStringCellValue().toString().equals(new String("Forma de ingresso do aluno"))){
		         					celulaAnterior="Forma de ingresso do aluno";
		         				}
		         				if(celula.getStringCellValue().equals(new String("Tipo de veículo utilizado no transporte escolar"))){
		         					celulaAnterior="Tipo de veículo utilizado no transporte escolar";
		         				}
		         						
		         				
		         				if(celula.getStringCellValue().toString().equals(new String("Informações da Turma"))) {
		         					celulaAnterior="Informações da Turma";
		         				}
		         				
         					break;
         					case BLANK:
                                jLabel1.setText("LENDO CÉLULAS DE FORMATAÇÃO E FÓRMULAS"+celula.getStringCellValue().toString());
         						celulaAnterior="Informações da Turma";         						
         					default:
         						break;
         					}        					
         				}
         			}         
                                jProgressBar1.setValue(100);
         			JOptionPane.showMessageDialog(null, "Importação Concluída!");         			
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            }catch (FileNotFoundException ex) {
                                Logger.getLogger(CarregaArquivo.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                            Logger.getLogger(CarregaArquivo.class.getName()).log(Level.SEVERE, null, ex);
                        }
                           
                        }                    
                }.start();
            
       	  }
	 }
 
}
